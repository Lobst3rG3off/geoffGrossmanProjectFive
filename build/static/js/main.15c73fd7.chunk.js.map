{"version":3,"sources":["MemeBridge.js","App.js","serviceWorker.js","index.js"],"names":["MemeBridge","props","react_default","a","createElement","className","title","src","imgUrl","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomimzer","response","allMemes","toConsumableArray","state","memes","i","length","j","Math","floor","random","_ref","memeSlice","slice","setState","memetoAppend","handleClick","meme","document","getElementById","scrollIntoView","behavior","handledClick","isLoading","outputData","outputDataLength","isClicked","_this2","axios","url","method","headers","X-Content-Type-Options","then","data","id","onClick","map","template","src_MemeBridge","key","images","original","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAWeA,EATI,SAACC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACTH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,OACXJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKN,EAAMO,OAAQC,IAAKR,EAAMK,UCuH9BI,qBAlHb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAyCFI,YAAc,SAACC,GAGb,IAFA,IAAMC,EAAQR,OAAAS,EAAA,EAAAT,CAAOD,EAAKW,MAAMC,OAEvBC,EAAIJ,EAASK,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADEM,EAEf,CAACV,EAASM,GAAIN,EAASI,IAAnDJ,EAASI,GAFkCM,EAAA,GAE9BV,EAASM,GAFqBI,EAAA,GAK9C,IAAMC,EAAYX,EAASY,MAAM,EAAE,GACnCrB,EAAKsB,SAAS,CACZC,aAAcH,KApDJpB,EA2DdwB,YAAc,WAChB,IAAIC,EAAOzB,EAAKW,MAAMC,MAElBZ,EAAKO,YAAYkB,GAGnBC,SAASC,eAAe,WAAWC,eAAe,CAChDC,SAAU,YAlEE7B,EAsEd8B,aAAe,WACbJ,SAASC,eAAe,aAAaC,eAAe,CAACC,SAAS,YApE9D7B,EAAKW,MAAQ,CACXC,MAAO,GACPmB,WAAW,EACXC,WAAY,EACZC,iBAAkB,EAClBV,aAAc,GACdW,WAAW,GATDlC,mFAcM,IAAAmC,EAAAhC,KAElBiC,IAAM,CACJC,IAAK,0FACLC,OAAQ,MACRC,QAAS,CACPC,yBAA0B,aAE3BC,KAAK,SAACjC,GACP,IAAMyB,EAAmBzB,EAASkC,KAAKA,KAAK5B,OACtCF,EAAQJ,EAASkC,KAAKA,KAC5BP,EAAKb,SAAS,CACZW,mBACArB,6CAoDJ,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYiD,GAAG,aAC5BpD,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,wCAGKF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASkD,QAASzC,KAAKqB,aAAzC,cAKHjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUiD,GAAG,WAC1BpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXS,KAAKQ,MAAMY,aAAasB,IAAI,SAACC,EAAUjC,GACrC,OAAOtB,EAAAC,EAAAC,cAACsD,EAAD,CAAYC,IAAKnC,EAAGlB,MAAOmD,EAASnD,MAAOE,OAAQiD,EAASG,OAAOC,SAASb,QAGtF9C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASkD,QAASzC,KAAK2B,cAAzC,yBAnGCqB,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASjC,SAASC,eAAe,SD2H3C,kBAAmBiC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.15c73fd7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MemeBridge = (props) => {\r\n  return (\r\n    <div className=\"imageBox\">\r\n          <h3>{props.title}</h3>\r\n          <img src={props.imgUrl} alt={props.title}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MemeBridge\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport MemeBridge from './MemeBridge.js';\nimport  './App.css'; \n\n\n\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    //make an empty array for state\n    this.state = {\n      memes: [],\n      isLoading: true,\n      outputData: 0,\n      outputDataLength: 0,\n      memetoAppend: [],\n      isClicked: false,\n\n    }\n  }\n\n  componentDidMount() {\n\n    axios({\n      url: 'http://api.giphy.com/v1/gifs/trending?api_key=XI2UVtaoFcAmwfGg9S1bcArrtsCLVxPc&offset=0',\n      method: 'GET',\n      headers: {\n        'X-Content-Type-Options': 'nosniff'\n      }\n    }).then((response) => {\n      const outputDataLength = response.data.data.length;\n      const memes = response.data.data;\n      this.setState({\n        outputDataLength,\n        memes,\n      })\n    })\n\n    // axios.get(\"http://api.giphy.com/v1/gifs/trending?api_key=XI2UVtaoFcAmwfGg9S1bcArrtsCLVxPc&offset=0\")\n    //  .then((response) => {\n    //          const outputDataLength = response.data.data.length;\n    //          const memes = response.data.data;\n    //          this.setState({\n    //          outputDataLength,\n    //          memes,\n    //          })      \n    //        })\n          }\n\n  randomimzer = (response) => {\n    const allMemes = [...this.state.memes];\n    \n    for (let i = allMemes.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [allMemes[i], allMemes[j]] = [allMemes[j], allMemes[i]];\n    }\n\n    const memeSlice = allMemes.slice(0,6)\n    this.setState({\n      memetoAppend: memeSlice\n    })\n    \n\n  }\n\n// submit button\n  handleClick = () => {\nlet meme = this.state.memes\n\n    this.randomimzer(meme);\n\n    \n  document.getElementById(\"gallery\").scrollIntoView({\n    behavior: \"smooth\"\n  });\n  }\n// back to top button\n  handledClick = () => {\n    document.getElementById(\"heroImage\").scrollIntoView({behavior:\"smooth\"});\n  }\n\n\n  \n  render() {\n     \n        \n    return (\n      <div className=\"App\" >\n        <div className=\"heroImage\" id=\"heroImage\">\n          <h1> Trending Gifs </h1> \n          <h2>Anyway you say it, they are awesome!</h2>\n          <h2>See the most trending GIFs</h2>\n        \n        \n               <button className=\"button\" onClick={this.handleClick} >\n                Lets See!\n              </button>\n      </div>\n\n            <div className=\"gallery\" id=\"gallery\" >\n              <div className=\"wrapper\">\n                { this.state.memetoAppend.map((template, i) => {\n                    return <MemeBridge key={i} title={template.title} imgUrl={template.images.original.url} />\n                  })\n                }  \n                 <button className=\"button\" onClick={this.handledClick}>Back to Top</button>\n                </div>\n               \n            </div>   \n      </div>\n    )\n  }\n}\n\n\n  \n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}